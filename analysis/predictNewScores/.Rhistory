print('Python interface is working')
import pandas as pd
import numpy as np
from sklearn.linear_model import Lasso, Ridge
from sklearn.model_selection import cross_val_predict
from sklearn.model_selection import RandomizedSearchCV
from sklearn.preprocessing import scale
from tqdm import tqdm
from scipy.stats.distributions import halfcauchy
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
import matplotlib
import matplotlib.font_manager as font_manager
import seaborn as sns
from sklearn.model_selection import train_test_split
#Sort out directories
import os
cwd = os.getcwd()
workspace1 = "hopkins" #alex work mac
if workspace1 in cwd:
baseDir = '/Users/alexhopkins/Dropbox (Royal Holloway)/ESRC_NIG/RTMAT/github/optimising-transdiagnostic-measurement'
else:
baseDir = 'add_new_directory_here'
qnsRTMAT = pd.read_csv(baseDir + 'data/raw/RTMATitems.csv')
scoresRTMAT = pd.read_csv(baseDir + 'data/EFAscores/RTMATscores.csv')
##### SETUP STABLE PARAMS ######
matplotlib.rcParams['font.weight'] = 'light'
matplotlib.rcParams['axes.facecolor'] = '#fbfbfb'
pal = ['#4f4f4f', '#B80044', '#0e79b2']
filename = baseDir + 'github/optimising-transdiagnostic-measurement/data/three_factor_classifier.pkl'
clf = joblib.load(filename)
import joblib
filename = baseDir + 'github/optimising-transdiagnostic-measurement/data/three_factor_classifier.pkl'
clf = joblib.load(filename)
import joblib
filename = baseDir + '/github/optimising-transdiagnostic-measurement/data/three_factor_classifier.pkl'
clf = joblib.load(filename)
import joblib
filename = baseDir + 'data/three_factor_classifier.pkl'
clf = joblib.load(filename)
import joblib
filename = baseDir + '/data/three_factor_classifier.pkl'
clf = joblib.load(filename)
dataFrame = data.frame
batchN = 1
onlineDir = '/Users/alexhopkins/Dropbox (Royal Holloway)/ESRC_NIG/onlineStudy/'
if batchN == 1:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch01.csv')
print('USING BATCH 01')
elif batchN == 2:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch02.csv')
print('USING BATCH 02')
elif batchN == 3:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch03.csv')
print('USING BATCH 03')
elif batchN == 4:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch04.csv')
print('USING BATCH 04')
elif batchN == 5:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch05.csv')
print('USING BATCH 05')
factor_score_pred = clf.predict(transQs.iloc[:,1:])
batchN = 1
onlineDir = '/Users/alexhopkins/Dropbox (Royal Holloway)/ESRC_NIG/onlineStudy/'
if batchN == 1:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch01.csv')
print('USING BATCH 01')
elif batchN == 2:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch02.csv')
print('USING BATCH 02')
elif batchN == 3:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch03.csv')
print('USING BATCH 03')
elif batchN == 4:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch04.csv')
print('USING BATCH 04')
elif batchN == 5:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch05.csv')
print('USING BATCH 05')
factor_score_pred = clf.predict(transQs.iloc[:,1:])
factor_score_pred = pd.DataFrame(factor_score_pred, columns=['AD', 'Compul', 'SW'])
factor_score_pred.loc[:, 'subjIDs'] = transQs['subjIDs'].values
factor_score_pred.head()
batchN = 1
onlineDir = '/Users/alexhopkins/Dropbox (Royal Holloway)/ESRC_NIG/onlineStudy/'
if batchN == 1:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch01.csv')
print('USING BATCH 01')
elif batchN == 2:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch02.csv')
print('USING BATCH 02')
elif batchN == 3:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch03.csv')
print('USING BATCH 03')
elif batchN == 4:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch04.csv')
print('USING BATCH 04')
elif batchN == 5:
transQs = pd.read_csv(onlineDir + 'data/preprocessed/questionnaires/transDiagQs_batch05.csv')
print('USING BATCH 05')
factor_score_pred = clf.predict(transQs.iloc[:,1:])
factor_score_pred = pd.DataFrame(factor_score_pred, columns=['AD', 'Compul', 'SW'])
factor_score_pred.loc[:, 'subjIDs'] = transQs['subjIDs'].values
factor_score_pred.head()
factor_score_pred = clf.predict(transQs.iloc[:,1:])
factor_score_pred = pd.DataFrame(factor_score_pred, columns=['AD', 'Compul', 'SW'])
factor_score_pred.loc[:, 'subjIDs'] = transQs['subjIDs'].values
factor_score_pred.head()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.distplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.distplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.displot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
sns.distplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.distplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
plt()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n], hist_kws={'ec':pal[n], 'alpha':0.5})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n]})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n]})
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n])
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
plt.tight_layout()
light_pal =['#9e9e9e', '#e86d9a', '#64abd1']
f, ax = plt.subplots(1, 3, figsize=(10, 3), dpi=100, facecolor='white')
factors = ['Anxiety & depression', 'Compulsivity', 'Social withdrawal']
for n, factor in enumerate(['AD', 'Compul', 'SW']):
sns.histplot(factor_score_pred[factor], ax=ax[n], color=light_pal[n])
ax[n].set_xlabel('Score')
if n == 0:
ax[n].set_ylabel('Density')
ax[n].set_title(factors[n], fontweight='light')
plt.tight_layout()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
os <- import("os")
reticulate::virtualenv_create(envname = "myenv", python ="/usr/local/bin/python3")
# set_python_env("myenv", type = "virtualenv")
# use_python("/Library/Frameworks/Python.framework/Versions/3.9/bin/python3", required = T)
# use_python("/usr/local/bin/python3", required = T)
# INSTALL SETTINGS - NEED TO INSTALL PYTHON ENVIRONMENTS IF USING FOR THE FIRST TIME
# py_install("sklearn",pip = TRUE) #might need to install using pip if miniconda doesnt work
# py_install("sklearn")
# py_install("pandas")
# py_install("numpy")
# py_install("tqdm")
# py_install("scipy")
# py_install("matplotlib")
# py_install("seaborn")
# py_install("os", pip = TRUE)
py_config()
reticulate::repl_python()
